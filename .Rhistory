makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m
data
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
makeCacheMatrix <- function(x = numeric()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
makeCacheMatrix <- function(x = numeric()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
acheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
acheSolve(a
acheSolve(a
bigVec <- makeVector(1:1000)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec <- makeVector(1:1000)
bigVec
cachemean(bigVec)
cachemean(bigVec)
biggerVec <- makeVector(1:100000)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
achemean(bigVec)
cachemean(bigVec)
cachemean(bigVec)
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
sdf
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
biggerVec <- makeVector(1:100000)
biggerVec <- makeCacheMatrix(1:100000)
biggerVec
cacheSolve(biggerVec)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(1:5)
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(1:4)
cacheSolve(biggerVec)
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
cacheSolve(a)
biggerVec <- makeCacheMatrix(matrix(1:6, 2))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(1:2, 2))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(2:2, 2))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(2:2))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(10:10))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(15:15))
cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(95:95))
cacheSolve(biggerVec)
cacheSolve(biggerVec)
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
biggerVec <- makeCacheMatrix(matrix(95:95))
cacheSolve(biggerVec)
cacheSolve(biggerVec)
biggerVec <- matrix(1:4,2,2)
cacheSolve(biggerVec)
biggerVec <- matrix(1:4,2,2)
biggerVec <- makeCacheMatrix(matrix(95:95))
## Functions cache the inverse of a matrix
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve willretrieve the inverse from the cache.
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
sampledata <makeCacheMatrix(matrix(2:2))
sampledata <- makeCacheMatrix(matrix(2:2))
cacheSolve(sampledata)
cacheSolve(sampledata)
sampledata <- makeCacheMatrix(matrix(3:2))
cacheSolve(sampledata)
sampledata <- makeCacheMatrix(matrix(3:3))
cacheSolve(sampledata)
setwd("C:/R/ProgrammingAssignment2")
source("cachematrix.R")
> biggerVec <- makeCacheMatrix(matrix(95:95))
> cacheSolve(biggerVec)
biggerVec <- makeCacheMatrix(matrix(95:95))
cacheSolve(biggerVec)
